// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProtoUpdated extends ethereum.Event {
  get params(): ProtoUpdated__Params {
    return new ProtoUpdated__Params(this);
  }
}

export class ProtoUpdated__Params {
  _event: ProtoUpdated;

  constructor(event: ProtoUpdated) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class SeasonStarted extends ethereum.Event {
  get params(): SeasonStarted__Params {
    return new SeasonStarted__Params(this);
  }
}

export class SeasonStarted__Params {
  _event: SeasonStarted;

  constructor(event: SeasonStarted) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get low(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get high(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class QualityChanged extends ethereum.Event {
  get params(): QualityChanged__Params {
    return new QualityChanged__Params(this);
  }
}

export class QualityChanged__Params {
  _event: QualityChanged;

  constructor(event: QualityChanged) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get quality(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get factory(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CardsMinted extends ethereum.Event {
  get params(): CardsMinted__Params {
    return new CardsMinted__Params(this);
  }
}

export class CardsMinted__Params {
  _event: CardsMinted;

  constructor(event: CardsMinted) {
    this._event = event;
  }

  get start(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get protos(): Array<i32> {
    return this._event.parameters[2].value.toI32Array();
  }

  get qualities(): Array<i32> {
    return this._event.parameters[3].value.toI32Array();
  }
}

export class ClassPropertySet extends ethereum.Event {
  get params(): ClassPropertySet__Params {
    return new ClassPropertySet__Params(this);
  }
}

export class ClassPropertySet__Params {
  _event: ClassPropertySet;

  constructor(event: ClassPropertySet) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class TokenPropertySet extends ethereum.Event {
  get params(): TokenPropertySet__Params {
    return new TokenPropertySet__Params(this);
  }
}

export class TokenPropertySet__Params {
  _event: TokenPropertySet;

  constructor(event: TokenPropertySet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get key(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class gods__getBatchResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class gods__protosResult {
  value0: boolean;
  value1: boolean;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;
  value8: i32;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }
}

export class gods__batchesResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class gods__getDetailsResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class gods__seasonsResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class gods extends ethereum.SmartContract {
  static bind(address: Address): gods {
    return new gods("gods", address);
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mythicTradable(param0: i32): boolean {
    let result = super.call("mythicTradable", "mythicTradable(uint16):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBoolean();
  }

  try_mythicTradable(param0: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mythicTradable",
      "mythicTradable(uint16):(bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProto(_tokenId: BigInt): i32 {
    let result = super.call("getProto", "getProto(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toI32();
  }

  try_getProto(_tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getProto", "getProto(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  addressToUserID(param0: Address): BigInt {
    let result = super.call(
      "addressToUserID",
      "addressToUserID(address):(uint48)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressToUserID(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToUserID",
      "addressToUserID(address):(uint48)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mythicApproved(param0: i32, param1: Address): boolean {
    let result = super.call(
      "mythicApproved",
      "mythicApproved(uint16,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_mythicApproved(
    param0: i32,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mythicApproved",
      "mythicApproved(uint16,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOld(_tokenId: BigInt): boolean {
    let result = super.call("isOld", "isOld(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isOld(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOld", "isOld(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factoryApproved(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "factoryApproved",
      "factoryApproved(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_factoryApproved(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "factoryApproved",
      "factoryApproved(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MYTHIC_THRESHOLD(): i32 {
    let result = super.call(
      "MYTHIC_THRESHOLD",
      "MYTHIC_THRESHOLD():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_MYTHIC_THRESHOLD(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MYTHIC_THRESHOLD",
      "MYTHIC_THRESHOLD():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTokenKey(_tokenId: BigInt, _key: Bytes): Bytes {
    let result = super.call(
      "getTokenKey",
      "getTokenKey(uint256,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromFixedBytes(_key)
      ]
    );

    return result[0].toBytes();
  }

  try_getTokenKey(_tokenId: BigInt, _key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTokenKey",
      "getTokenKey(uint256,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromFixedBytes(_key)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getClassKey(_key: Bytes): Bytes {
    let result = super.call("getClassKey", "getClassKey(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(_key)
    ]);

    return result[0].toBytes();
  }

  try_getClassKey(_key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getClassKey",
      "getClassKey(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  migrating(): boolean {
    let result = super.call("migrating", "migrating():(bool)", []);

    return result[0].toBoolean();
  }

  try_migrating(): ethereum.CallResult<boolean> {
    let result = super.tryCall("migrating", "migrating():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBatch(index: BigInt): gods__getBatchResult {
    let result = super.call("getBatch", "getBatch(uint256):(uint48,uint16)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return new gods__getBatchResult(result[0].toBigInt(), result[1].toI32());
  }

  try_getBatch(index: BigInt): ethereum.CallResult<gods__getBatchResult> {
    let result = super.tryCall(
      "getBatch",
      "getBatch(uint256):(uint48,uint16)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new gods__getBatchResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  mintCard(_to: Address, _proto: i32, _quality: i32): BigInt {
    let result = super.call(
      "mintCard",
      "mintCard(address,uint16,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_proto)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_quality))
      ]
    );

    return result[0].toBigInt();
  }

  try_mintCard(
    _to: Address,
    _proto: i32,
    _quality: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintCard",
      "mintCard(address,uint16,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_proto)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_quality))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userIDToAddress(param0: BigInt): Address {
    let result = super.call(
      "userIDToAddress",
      "userIDToAddress(uint48):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_userIDToAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userIDToAddress",
      "userIDToAddress(uint48):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBatchStart(tokenId: BigInt): BigInt {
    let result = super.call(
      "getBatchStart",
      "getBatchStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getBatchStart(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBatchStart",
      "getBatchStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startSeason(name: string, low: i32, high: i32): BigInt {
    let result = super.call(
      "startSeason",
      "startSeason(string,uint16,uint16):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(low)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(high))
      ]
    );

    return result[0].toBigInt();
  }

  try_startSeason(
    name: string,
    low: i32,
    high: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startSeason",
      "startSeason(string,uint16,uint16):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(low)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(high))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenCount(): BigInt {
    let result = super.call("tokenCount", "tokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCount", "tokenCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClassProperty(_key: Bytes): Bytes {
    let result = super.call(
      "getClassProperty",
      "getClassProperty(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_key)]
    );

    return result[0].toBytes();
  }

  try_getClassProperty(_key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getClassProperty",
      "getClassProperty(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  protos(param0: BigInt): gods__protosResult {
    let result = super.call(
      "protos",
      "protos(uint256):(bool,bool,uint8,uint8,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new gods__protosResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
      result[8].toI32()
    );
  }

  try_protos(param0: BigInt): ethereum.CallResult<gods__protosResult> {
    let result = super.tryCall(
      "protos",
      "protos(uint256):(bool,bool,uint8,uint8,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new gods__protosResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
        value[8].toI32()
      )
    );
  }

  seasonTradable(param0: BigInt): boolean {
    let result = super.call(
      "seasonTradable",
      "seasonTradable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_seasonTradable(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "seasonTradable",
      "seasonTradable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  batches(param0: BigInt): gods__batchesResult {
    let result = super.call("batches", "batches(uint256):(uint48,uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new gods__batchesResult(result[0].toBigInt(), result[1].toI32());
  }

  try_batches(param0: BigInt): ethereum.CallResult<gods__batchesResult> {
    let result = super.tryCall("batches", "batches(uint256):(uint48,uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new gods__batchesResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  protoToSeason(param0: BigInt): i32 {
    let result = super.call(
      "protoToSeason",
      "protoToSeason(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toI32();
  }

  try_protoToSeason(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "protoToSeason",
      "protoToSeason(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  old(): Address {
    let result = super.call("old", "old():(address)", []);

    return result[0].toAddress();
  }

  try_old(): ethereum.CallResult<Address> {
    let result = super.tryCall("old", "old():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDetails(tokenId: BigInt): gods__getDetailsResult {
    let result = super.call(
      "getDetails",
      "getDetails(uint256):(uint16,uint8)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new gods__getDetailsResult(result[0].toI32(), result[1].toI32());
  }

  try_getDetails(tokenId: BigInt): ethereum.CallResult<gods__getDetailsResult> {
    let result = super.tryCall(
      "getDetails",
      "getDetails(uint256):(uint16,uint8)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new gods__getDetailsResult(value[0].toI32(), value[1].toI32())
    );
  }

  properties(param0: Bytes): Bytes {
    let result = super.call("properties", "properties(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBytes();
  }

  try_properties(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("properties", "properties(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  mintCards(_to: Address, _protos: Array<i32>, _qualities: Array<i32>): BigInt {
    let result = super.call(
      "mintCards",
      "mintCards(address,uint16[],uint8[]):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromI32Array(_protos),
        ethereum.Value.fromI32Array(_qualities)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintCards(
    _to: Address,
    _protos: Array<i32>,
    _qualities: Array<i32>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintCards",
      "mintCards(address,uint16[],uint8[]):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromI32Array(_protos),
        ethereum.Value.fromI32Array(_qualities)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProperty(_id: BigInt, _key: Bytes): Bytes {
    let result = super.call(
      "getProperty",
      "getProperty(uint256,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromFixedBytes(_key)
      ]
    );

    return result[0].toBytes();
  }

  try_getProperty(_id: BigInt, _key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getProperty",
      "getProperty(uint256,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromFixedBytes(_key)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  mythicCreated(param0: i32): boolean {
    let result = super.call("mythicCreated", "mythicCreated(uint16):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBoolean();
  }

  try_mythicCreated(param0: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mythicCreated",
      "mythicCreated(uint16):(bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTradable(_tokenId: BigInt): boolean {
    let result = super.call("isTradable", "isTradable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isTradable(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTradable", "isTradable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  propertyManager(): Address {
    let result = super.call(
      "propertyManager",
      "propertyManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_propertyManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "propertyManager",
      "propertyManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextBatch(): BigInt {
    let result = super.call("nextBatch", "nextBatch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextBatch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextBatch", "nextBatch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getQuality(_tokenId: BigInt): i32 {
    let result = super.call("getQuality", "getQuality(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toI32();
  }

  try_getQuality(_tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getQuality", "getQuality(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  batchSize(): BigInt {
    let result = super.call("batchSize", "batchSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_batchSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("batchSize", "batchSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasons(param0: BigInt): gods__seasonsResult {
    let result = super.call("seasons", "seasons(uint256):(uint16,uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new gods__seasonsResult(result[0].toI32(), result[1].toI32());
  }

  try_seasons(param0: BigInt): ethereum.CallResult<gods__seasonsResult> {
    let result = super.tryCall("seasons", "seasons(uint256):(uint16,uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new gods__seasonsResult(value[0].toI32(), value[1].toI32())
    );
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class TransferAllFromCall extends ethereum.Call {
  get inputs(): TransferAllFromCall__Inputs {
    return new TransferAllFromCall__Inputs(this);
  }

  get outputs(): TransferAllFromCall__Outputs {
    return new TransferAllFromCall__Outputs(this);
  }
}

export class TransferAllFromCall__Inputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferAllFromCall__Outputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }
}

export class BurnAllCall extends ethereum.Call {
  get inputs(): BurnAllCall__Inputs {
    return new BurnAllCall__Inputs(this);
  }

  get outputs(): BurnAllCall__Outputs {
    return new BurnAllCall__Outputs(this);
  }
}

export class BurnAllCall__Inputs {
  _call: BurnAllCall;

  constructor(call: BurnAllCall) {
    this._call = call;
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BurnAllCall__Outputs {
  _call: BurnAllCall;

  constructor(call: BurnAllCall) {
    this._call = call;
  }
}

export class UpdateProtosCall extends ethereum.Call {
  get inputs(): UpdateProtosCall__Inputs {
    return new UpdateProtosCall__Inputs(this);
  }

  get outputs(): UpdateProtosCall__Outputs {
    return new UpdateProtosCall__Outputs(this);
  }
}

export class UpdateProtosCall__Inputs {
  _call: UpdateProtosCall;

  constructor(call: UpdateProtosCall) {
    this._call = call;
  }

  get _ids(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get _gods(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get _cardTypes(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get _rarities(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get _manas(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get _attacks(): Array<i32> {
    return this._call.inputValues[5].value.toI32Array();
  }

  get _healths(): Array<i32> {
    return this._call.inputValues[6].value.toI32Array();
  }

  get _tribes(): Array<i32> {
    return this._call.inputValues[7].value.toI32Array();
  }
}

export class UpdateProtosCall__Outputs {
  _call: UpdateProtosCall;

  constructor(call: UpdateProtosCall) {
    this._call = call;
  }
}

export class SetPropertyManagerCall extends ethereum.Call {
  get inputs(): SetPropertyManagerCall__Inputs {
    return new SetPropertyManagerCall__Inputs(this);
  }

  get outputs(): SetPropertyManagerCall__Outputs {
    return new SetPropertyManagerCall__Outputs(this);
  }
}

export class SetPropertyManagerCall__Inputs {
  _call: SetPropertyManagerCall;

  constructor(call: SetPropertyManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPropertyManagerCall__Outputs {
  _call: SetPropertyManagerCall;

  constructor(call: SetPropertyManagerCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class LockProtosCall extends ethereum.Call {
  get inputs(): LockProtosCall__Inputs {
    return new LockProtosCall__Inputs(this);
  }

  get outputs(): LockProtosCall__Outputs {
    return new LockProtosCall__Outputs(this);
  }
}

export class LockProtosCall__Inputs {
  _call: LockProtosCall;

  constructor(call: LockProtosCall) {
    this._call = call;
  }

  get _ids(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }
}

export class LockProtosCall__Outputs {
  _call: LockProtosCall;

  constructor(call: LockProtosCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CopyUntilCall extends ethereum.Call {
  get inputs(): CopyUntilCall__Inputs {
    return new CopyUntilCall__Inputs(this);
  }

  get outputs(): CopyUntilCall__Outputs {
    return new CopyUntilCall__Outputs(this);
  }
}

export class CopyUntilCall__Inputs {
  _call: CopyUntilCall;

  constructor(call: CopyUntilCall) {
    this._call = call;
  }

  get gasThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CopyUntilCall__Outputs {
  _call: CopyUntilCall;

  constructor(call: CopyUntilCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetPropertyCall extends ethereum.Call {
  get inputs(): SetPropertyCall__Inputs {
    return new SetPropertyCall__Inputs(this);
  }

  get outputs(): SetPropertyCall__Outputs {
    return new SetPropertyCall__Outputs(this);
  }
}

export class SetPropertyCall__Inputs {
  _call: SetPropertyCall;

  constructor(call: SetPropertyCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _value(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetPropertyCall__Outputs {
  _call: SetPropertyCall;

  constructor(call: SetPropertyCall) {
    this._call = call;
  }
}

export class MintCardCall extends ethereum.Call {
  get inputs(): MintCardCall__Inputs {
    return new MintCardCall__Inputs(this);
  }

  get outputs(): MintCardCall__Outputs {
    return new MintCardCall__Outputs(this);
  }
}

export class MintCardCall__Inputs {
  _call: MintCardCall;

  constructor(call: MintCardCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proto(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _quality(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class MintCardCall__Outputs {
  _call: MintCardCall;

  constructor(call: MintCardCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveForMythicCall extends ethereum.Call {
  get inputs(): ApproveForMythicCall__Inputs {
    return new ApproveForMythicCall__Inputs(this);
  }

  get outputs(): ApproveForMythicCall__Outputs {
    return new ApproveForMythicCall__Outputs(this);
  }
}

export class ApproveForMythicCall__Inputs {
  _call: ApproveForMythicCall;

  constructor(call: ApproveForMythicCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _mythic(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ApproveForMythicCall__Outputs {
  _call: ApproveForMythicCall;

  constructor(call: ApproveForMythicCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferAllFromCall extends ethereum.Call {
  get inputs(): SafeTransferAllFromCall__Inputs {
    return new SafeTransferAllFromCall__Inputs(this);
  }

  get outputs(): SafeTransferAllFromCall__Outputs {
    return new SafeTransferAllFromCall__Outputs(this);
  }
}

export class SafeTransferAllFromCall__Inputs {
  _call: SafeTransferAllFromCall;

  constructor(call: SafeTransferAllFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SafeTransferAllFromCall__Outputs {
  _call: SafeTransferAllFromCall;

  constructor(call: SafeTransferAllFromCall) {
    this._call = call;
  }
}

export class StartSeasonCall extends ethereum.Call {
  get inputs(): StartSeasonCall__Inputs {
    return new StartSeasonCall__Inputs(this);
  }

  get outputs(): StartSeasonCall__Outputs {
    return new StartSeasonCall__Outputs(this);
  }
}

export class StartSeasonCall__Inputs {
  _call: StartSeasonCall;

  constructor(call: StartSeasonCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get low(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get high(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class StartSeasonCall__Outputs {
  _call: StartSeasonCall;

  constructor(call: StartSeasonCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetClassPropertyCall extends ethereum.Call {
  get inputs(): SetClassPropertyCall__Inputs {
    return new SetClassPropertyCall__Inputs(this);
  }

  get outputs(): SetClassPropertyCall__Outputs {
    return new SetClassPropertyCall__Outputs(this);
  }
}

export class SetClassPropertyCall__Inputs {
  _call: SetClassPropertyCall;

  constructor(call: SetClassPropertyCall) {
    this._call = call;
  }

  get _key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetClassPropertyCall__Outputs {
  _call: SetClassPropertyCall;

  constructor(call: SetClassPropertyCall) {
    this._call = call;
  }
}

export class SafeTransferBatchCall extends ethereum.Call {
  get inputs(): SafeTransferBatchCall__Inputs {
    return new SafeTransferBatchCall__Inputs(this);
  }

  get outputs(): SafeTransferBatchCall__Outputs {
    return new SafeTransferBatchCall__Outputs(this);
  }
}

export class SafeTransferBatchCall__Inputs {
  _call: SafeTransferBatchCall;

  constructor(call: SafeTransferBatchCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get start(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SafeTransferBatchCall__Outputs {
  _call: SafeTransferBatchCall;

  constructor(call: SafeTransferBatchCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class UnlockTradingCall extends ethereum.Call {
  get inputs(): UnlockTradingCall__Inputs {
    return new UnlockTradingCall__Inputs(this);
  }

  get outputs(): UnlockTradingCall__Outputs {
    return new UnlockTradingCall__Outputs(this);
  }
}

export class UnlockTradingCall__Inputs {
  _call: UnlockTradingCall;

  constructor(call: UnlockTradingCall) {
    this._call = call;
  }

  get _season(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockTradingCall__Outputs {
  _call: UnlockTradingCall;

  constructor(call: UnlockTradingCall) {
    this._call = call;
  }
}

export class TransferBatchCall extends ethereum.Call {
  get inputs(): TransferBatchCall__Inputs {
    return new TransferBatchCall__Inputs(this);
  }

  get outputs(): TransferBatchCall__Outputs {
    return new TransferBatchCall__Outputs(this);
  }
}

export class TransferBatchCall__Inputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get start(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferBatchCall__Outputs {
  _call: TransferBatchCall;

  constructor(call: TransferBatchCall) {
    this._call = call;
  }
}

export class MintCardsCall extends ethereum.Call {
  get inputs(): MintCardsCall__Inputs {
    return new MintCardsCall__Inputs(this);
  }

  get outputs(): MintCardsCall__Outputs {
    return new MintCardsCall__Outputs(this);
  }
}

export class MintCardsCall__Inputs {
  _call: MintCardsCall;

  constructor(call: MintCardsCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _protos(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get _qualities(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class MintCardsCall__Outputs {
  _call: MintCardsCall;

  constructor(call: MintCardsCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CopyNextBatchCall extends ethereum.Call {
  get inputs(): CopyNextBatchCall__Inputs {
    return new CopyNextBatchCall__Inputs(this);
  }

  get outputs(): CopyNextBatchCall__Outputs {
    return new CopyNextBatchCall__Outputs(this);
  }
}

export class CopyNextBatchCall__Inputs {
  _call: CopyNextBatchCall;

  constructor(call: CopyNextBatchCall) {
    this._call = call;
  }
}

export class CopyNextBatchCall__Outputs {
  _call: CopyNextBatchCall;

  constructor(call: CopyNextBatchCall) {
    this._call = call;
  }
}

export class SetQualityCall extends ethereum.Call {
  get inputs(): SetQualityCall__Inputs {
    return new SetQualityCall__Inputs(this);
  }

  get outputs(): SetQualityCall__Outputs {
    return new SetQualityCall__Outputs(this);
  }
}

export class SetQualityCall__Inputs {
  _call: SetQualityCall;

  constructor(call: SetQualityCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quality(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetQualityCall__Outputs {
  _call: SetQualityCall;

  constructor(call: SetQualityCall) {
    this._call = call;
  }
}

export class MakeMythicTradableCall extends ethereum.Call {
  get inputs(): MakeMythicTradableCall__Inputs {
    return new MakeMythicTradableCall__Inputs(this);
  }

  get outputs(): MakeMythicTradableCall__Outputs {
    return new MakeMythicTradableCall__Outputs(this);
  }
}

export class MakeMythicTradableCall__Inputs {
  _call: MakeMythicTradableCall;

  constructor(call: MakeMythicTradableCall) {
    this._call = call;
  }

  get _mythic(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class MakeMythicTradableCall__Outputs {
  _call: MakeMythicTradableCall;

  constructor(call: MakeMythicTradableCall) {
    this._call = call;
  }
}

export class AddFactoryCall extends ethereum.Call {
  get inputs(): AddFactoryCall__Inputs {
    return new AddFactoryCall__Inputs(this);
  }

  get outputs(): AddFactoryCall__Outputs {
    return new AddFactoryCall__Outputs(this);
  }
}

export class AddFactoryCall__Inputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _season(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddFactoryCall__Outputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetMigratingCall extends ethereum.Call {
  get inputs(): SetMigratingCall__Inputs {
    return new SetMigratingCall__Inputs(this);
  }

  get outputs(): SetMigratingCall__Outputs {
    return new SetMigratingCall__Outputs(this);
  }
}

export class SetMigratingCall__Inputs {
  _call: SetMigratingCall;

  constructor(call: SetMigratingCall) {
    this._call = call;
  }

  get _migrating(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetMigratingCall__Outputs {
  _call: SetMigratingCall;

  constructor(call: SetMigratingCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _old(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batchSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
